//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WS_CSDL_Form.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BangLop", Namespace="http://schemas.datacontract.org/2004/07/WS_CSDL")]
    [System.SerializableAttribute()]
    public partial class BangLop : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MalopField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TenlopField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Malop {
            get {
                return this.MalopField;
            }
            set {
                if ((object.ReferenceEquals(this.MalopField, value) != true)) {
                    this.MalopField = value;
                    this.RaisePropertyChanged("Malop");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tenlop {
            get {
                return this.TenlopField;
            }
            set {
                if ((object.ReferenceEquals(this.TenlopField, value) != true)) {
                    this.TenlopField = value;
                    this.RaisePropertyChanged("Tenlop");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bangmon", Namespace="http://schemas.datacontract.org/2004/07/WS_CSDL")]
    [System.SerializableAttribute()]
    public partial class Bangmon : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mamonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string temonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mamon {
            get {
                return this.mamonField;
            }
            set {
                if ((object.ReferenceEquals(this.mamonField, value) != true)) {
                    this.mamonField = value;
                    this.RaisePropertyChanged("mamon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string temon {
            get {
                return this.temonField;
            }
            set {
                if ((object.ReferenceEquals(this.temonField, value) != true)) {
                    this.temonField = value;
                    this.RaisePropertyChanged("temon");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IICSDLService")]
    public interface IICSDLService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Insert_Lop", ReplyAction="http://tempuri.org/IICSDLService/Insert_LopResponse")]
        string Insert_Lop(WS_CSDL_Form.ServiceReference1.BangLop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Insert_Lop", ReplyAction="http://tempuri.org/IICSDLService/Insert_LopResponse")]
        System.Threading.Tasks.Task<string> Insert_LopAsync(WS_CSDL_Form.ServiceReference1.BangLop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/GetAll", ReplyAction="http://tempuri.org/IICSDLService/GetAllResponse")]
        WS_CSDL_Form.ServiceReference1.BangLop[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/GetAll", ReplyAction="http://tempuri.org/IICSDLService/GetAllResponse")]
        System.Threading.Tasks.Task<WS_CSDL_Form.ServiceReference1.BangLop[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Update_Lop", ReplyAction="http://tempuri.org/IICSDLService/Update_LopResponse")]
        void Update_Lop(WS_CSDL_Form.ServiceReference1.BangLop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Update_Lop", ReplyAction="http://tempuri.org/IICSDLService/Update_LopResponse")]
        System.Threading.Tasks.Task Update_LopAsync(WS_CSDL_Form.ServiceReference1.BangLop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Delete_Lop", ReplyAction="http://tempuri.org/IICSDLService/Delete_LopResponse")]
        void Delete_Lop(WS_CSDL_Form.ServiceReference1.BangLop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Delete_Lop", ReplyAction="http://tempuri.org/IICSDLService/Delete_LopResponse")]
        System.Threading.Tasks.Task Delete_LopAsync(WS_CSDL_Form.ServiceReference1.BangLop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Insert_Mon", ReplyAction="http://tempuri.org/IICSDLService/Insert_MonResponse")]
        string Insert_Mon(WS_CSDL_Form.ServiceReference1.Bangmon mon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Insert_Mon", ReplyAction="http://tempuri.org/IICSDLService/Insert_MonResponse")]
        System.Threading.Tasks.Task<string> Insert_MonAsync(WS_CSDL_Form.ServiceReference1.Bangmon mon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Get_Mon", ReplyAction="http://tempuri.org/IICSDLService/Get_MonResponse")]
        WS_CSDL_Form.ServiceReference1.Bangmon[] Get_Mon();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Get_Mon", ReplyAction="http://tempuri.org/IICSDLService/Get_MonResponse")]
        System.Threading.Tasks.Task<WS_CSDL_Form.ServiceReference1.Bangmon[]> Get_MonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Update_Mon", ReplyAction="http://tempuri.org/IICSDLService/Update_MonResponse")]
        void Update_Mon(WS_CSDL_Form.ServiceReference1.Bangmon mon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Update_Mon", ReplyAction="http://tempuri.org/IICSDLService/Update_MonResponse")]
        System.Threading.Tasks.Task Update_MonAsync(WS_CSDL_Form.ServiceReference1.Bangmon mon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Delete_Mon", ReplyAction="http://tempuri.org/IICSDLService/Delete_MonResponse")]
        void Delete_Mon(WS_CSDL_Form.ServiceReference1.Bangmon mon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IICSDLService/Delete_Mon", ReplyAction="http://tempuri.org/IICSDLService/Delete_MonResponse")]
        System.Threading.Tasks.Task Delete_MonAsync(WS_CSDL_Form.ServiceReference1.Bangmon mon);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IICSDLServiceChannel : WS_CSDL_Form.ServiceReference1.IICSDLService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ICSDLServiceClient : System.ServiceModel.ClientBase<WS_CSDL_Form.ServiceReference1.IICSDLService>, WS_CSDL_Form.ServiceReference1.IICSDLService {
        
        public ICSDLServiceClient() {
        }
        
        public ICSDLServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ICSDLServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ICSDLServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ICSDLServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Insert_Lop(WS_CSDL_Form.ServiceReference1.BangLop lop) {
            return base.Channel.Insert_Lop(lop);
        }
        
        public System.Threading.Tasks.Task<string> Insert_LopAsync(WS_CSDL_Form.ServiceReference1.BangLop lop) {
            return base.Channel.Insert_LopAsync(lop);
        }
        
        public WS_CSDL_Form.ServiceReference1.BangLop[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<WS_CSDL_Form.ServiceReference1.BangLop[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Update_Lop(WS_CSDL_Form.ServiceReference1.BangLop lop) {
            base.Channel.Update_Lop(lop);
        }
        
        public System.Threading.Tasks.Task Update_LopAsync(WS_CSDL_Form.ServiceReference1.BangLop lop) {
            return base.Channel.Update_LopAsync(lop);
        }
        
        public void Delete_Lop(WS_CSDL_Form.ServiceReference1.BangLop lop) {
            base.Channel.Delete_Lop(lop);
        }
        
        public System.Threading.Tasks.Task Delete_LopAsync(WS_CSDL_Form.ServiceReference1.BangLop lop) {
            return base.Channel.Delete_LopAsync(lop);
        }
        
        public string Insert_Mon(WS_CSDL_Form.ServiceReference1.Bangmon mon) {
            return base.Channel.Insert_Mon(mon);
        }
        
        public System.Threading.Tasks.Task<string> Insert_MonAsync(WS_CSDL_Form.ServiceReference1.Bangmon mon) {
            return base.Channel.Insert_MonAsync(mon);
        }
        
        public WS_CSDL_Form.ServiceReference1.Bangmon[] Get_Mon() {
            return base.Channel.Get_Mon();
        }
        
        public System.Threading.Tasks.Task<WS_CSDL_Form.ServiceReference1.Bangmon[]> Get_MonAsync() {
            return base.Channel.Get_MonAsync();
        }
        
        public void Update_Mon(WS_CSDL_Form.ServiceReference1.Bangmon mon) {
            base.Channel.Update_Mon(mon);
        }
        
        public System.Threading.Tasks.Task Update_MonAsync(WS_CSDL_Form.ServiceReference1.Bangmon mon) {
            return base.Channel.Update_MonAsync(mon);
        }
        
        public void Delete_Mon(WS_CSDL_Form.ServiceReference1.Bangmon mon) {
            base.Channel.Delete_Mon(mon);
        }
        
        public System.Threading.Tasks.Task Delete_MonAsync(WS_CSDL_Form.ServiceReference1.Bangmon mon) {
            return base.Channel.Delete_MonAsync(mon);
        }
    }
}
